{"version":3,"file":"js/6382.68de610f.js","mappings":"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","sources":["webpack://bizMOB4Vue/./src/shared/components/BreadCrumb/BreadCrumb.vue?8a24","webpack://bizMOB4Vue/./src/shared/components/BreadCrumb/BreadCrumb.vue","webpack://bizMOB4Vue/./src/shared/components/BreadCrumb/BreadCrumb.html"],"sourcesContent":["\nimport { defineComponent, PropType } from 'vue'\nimport menuListData from '@/store/modules/menuListData';\nimport { MenuInfo } from './menuType'\nimport { DataCenter } from '@/shared/services/DataCenter';\nexport default defineComponent({\n    props: {\n        staticScreenName: {\n            type: String,\n            required: false,\n        },\n        queryData: {\n            type: Array as PropType<any[]>,\n            required: false,\n        }\n    },\n    data() {\n        return {\n            breadcrumbs: [] as MenuInfo[],\n            menuList: [] as MenuInfo[]\n        };\n    },\n    async created() {\n        setTimeout(() => {\n            this.renderMenuFromState();\n            this.getMenuList();\n        }, 100);\n    },\n    computed: {\n        approvalType(): string {\n            return this.$route.query.approvalType ? this.$route.query.approvalType.toString() : ''\n        },\n    },\n    watch: {\n        staticScreenName(newValue) {\n            // TODO: CHECK Configuration Management screene\n            if (this.$route.path == '/COM210001SC00') {\n                if (newValue) {\n                    this.breadcrumbs.length == 2 ? this.breadcrumbs : this.breadcrumbs.pop()\n                }\n                this.breadcrumbs.push({ menuName: newValue, route: '' })\n            }\n        }\n    },\n    methods: {\n        pathDriver(currentPath: string, queryItem?: any) {\n            if (this.approvalType === '') {\n                if (this.$route.path != currentPath) {\n                    if (queryItem) {\n                        this.$router.push({\n                            path: currentPath,\n                            query: queryItem\n                        });\n                    } else {\n                        this.$router.push(currentPath);\n                    }\n                } else {\n                    return;\n                }\n            }\n        },\n        async renderMenuFromState() {\n            return menuListData.getters.getMenuData;\n        },\n        async getMenuList() {\n            try {\n                this.menuList = await this.renderMenuFromState();\n                if (this.menuList.length > 0) {\n                    this.menuList = JSON.parse(JSON.stringify(this.menuList)).filter((item) => item.parentMenuID.replace(/\\s/g, '') != \"\");\n                    this.buildBreadcrumb(this.menuList, this.$route.path);\n                } else {\n                    console.log('menu not yet rendered');\n                }\n            } catch (error) {\n                console.log('Error rendering menu:', error);\n            }\n        },\n\n        async buildBreadcrumb(data: any, currentRoute: string) {\n            // TODO: CHECK EXISTING SCREEN-ID\n            const currentMenu: any = data.find((item: MenuInfo) => `/${item.screenID}` == currentRoute);\n            if (currentMenu) {\n                this.generateBreadcrumbs(data, currentMenu);\n                if (this.$route.path == '/ICM201001SC00') {\n                    const menu: any = data.find((item: MenuInfo) => item.screenID == 'ICM201001SC00');\n                    DataCenter.setData(\"SpecialScreenID\", JSON.stringify(menu))\n                }\n            } else {\n                // TODO: CHECK SCREEN-ID SUB USER SCREEN\n                if (this.$route.path == '/CIB202003SC00') {\n                    let menuitem;\n                    let parentSubUserListScreen: any;\n                    parentSubUserListScreen = data.find((item: any) => item.screenID == 'CIB202002SC00');\n                    menuitem = { menuName: this.staticScreenName ? this.staticScreenName : '', screenID: this.$route.path.replace(\"/\", ''), parentMenuID: parentSubUserListScreen.menuID, menuID: '1' };\n                    this.generateBreadcrumbs(data, menuitem);\n                }\n                const notExistScreenID: string = this.$route.path.replace(\"/\", '')\n                let menu = [] as MenuInfo[];\n                this.menuList.forEach((item: any) => {\n                    menu.push(item.screenID)\n                });\n                menu.forEach((parentScreenID) => {\n                    // TODO: COMPARE TEXT BEFORE LAST TEXT\n                    let menu: any;\n                    if (this.matchScreenID(parentScreenID, notExistScreenID)) {\n                        menu = data.find((item: MenuInfo) => `${item.screenID}` == parentScreenID);\n                        if (menu) {\n                            this.generateBreadcrumbs(data, menu);\n                        }\n\n                    }\n                    if (this.approvalType !== '') {\n                        if (notExistScreenID == 'VBA202002SC00' || notExistScreenID == 'CIB201003SC00') {\n                            if (this.matchApprovalModeScreenID(parentScreenID, notExistScreenID)) {\n                                const menu: any = data.find((item: MenuInfo) => `${item.screenID}` == parentScreenID);\n                                this.generateBreadcrumbs(data, menu);\n                            }\n                        }\n\n                    }\n                })\n                // TODO: CHECK THE LAST TEXT OF SCREENID TO ADD STATIC NAVIGATION (REGISTER/EDIT SCREEN)\n                let lastCharacterOfScreenID = notExistScreenID.charAt(notExistScreenID.length - 1);\n                if (lastCharacterOfScreenID === '1') {\n                    let staticBreabCrumb: MenuInfo = { menuName: this.staticScreenName ? this.staticScreenName : '', route: `/${notExistScreenID}` };\n                    this.breadcrumbs.push(staticBreabCrumb)\n                    DataCenter.setData(\"TempBreadCrumb\", JSON.stringify(staticBreabCrumb))\n                } else if (lastCharacterOfScreenID === '2') {\n                    if (this.$route.path == '/COM211001SC02') {\n                        this.breadcrumbs.push({ menuName: this.staticScreenName ? this.staticScreenName : '', route: `/${notExistScreenID}` })\n                    } else {\n                        let previousStaticScreenID = JSON.parse(await DataCenter.getData('TempBreadCrumb') as any);\n                        this.breadcrumbs.push(previousStaticScreenID, { menuName: this.staticScreenName ? this.staticScreenName : '', route: `/${notExistScreenID}` })\n                    }\n\n                } else {\n                    // TODO:  CHECK ON SCREEN ID IS NOT EQUAL TO NEW EVENT SCREEN\n                    if (this.$route.path != \"/CIB202003SC00\" && this.$route.path != '/PUM202002SC00') {\n                        let previousPath = this.$router.options.history.state.back as string;\n                        let pathID = previousPath.includes('/') ? previousPath.replace(\"/\", '') : previousPath;\n                        const menuItems: MenuInfo = await data.find((item: MenuInfo) => `${item.screenID}` == pathID);\n                        this.breadcrumbs.push({ menuName: this.staticScreenName ? this.staticScreenName : '', route: `/${notExistScreenID}` })\n                        this.generateBreadcrumbs(data, menuItems);\n                    }\n                }\n                // TODO:  CHECK ON NEW EVENT SCREEN\n                if (this.$route.path == \"/ICM201002SC01\") {\n                    this.breadcrumbs = [];\n                    let menuNewEvent = JSON.parse(await DataCenter.getData('SpecialScreenID') as any);\n                    this.breadcrumbs.push({ menuName: this.staticScreenName ? this.staticScreenName : '', route: `/${notExistScreenID}` })\n                    this.generateBreadcrumbs(data, menuNewEvent);\n                } else if (this.$route.path == '/CIB202003SC01') {\n                    // TODO:  CHECK ON SUB USER REGISTER OR EDIT SCREEN\n                    this.breadcrumbs = [];\n                    let menuitem;\n                    let parentSubUserListScreen: any;\n                    parentSubUserListScreen = data.find((item: any) => item.screenID == 'CIB202002SC00');\n                    menuitem = { menuName: this.$t('cib202003sc00.sub_user_list'), screenID: 'CIB202003SC00', parentMenuID: parentSubUserListScreen.menuID };\n                    this.breadcrumbs.push({ menuName: this.staticScreenName ? this.staticScreenName : '', route: `/${notExistScreenID}` })\n                    this.generateBreadcrumbs(data, menuitem);\n                } else if (this.$route.path == '/PUM202002SC00') {\n                    let menuitem;\n                    let homeScreen: any;\n                    homeScreen = data.find((item: any) => item.screenID == 'COM200001SC00');\n                    menuitem = { menuName: this.staticScreenName ? this.staticScreenName : '', screenID: this.$route.path.replace(\"/\", ''), parentMenuID: homeScreen.menuID };\n                    this.generateBreadcrumbs(data, menuitem);\n                }\n            }\n        },\n\n        async generateBreadcrumbs(data: any, menu: MenuInfo) {\n            try {\n                if (menu) {\n                    const breadcrumb = { menuName: menu.menuName, route: `/${menu.screenID}`, menuIconID: menu.menuIconID } as any;\n                    this.breadcrumbs.unshift(breadcrumb);\n                    if (menu.parentMenuID) {\n                        const parentMenu = data.find((item: MenuInfo) => item.menuID == menu.parentMenuID);\n                        if (parentMenu) {\n                            this.generateBreadcrumbs(data, parentMenu);\n                        }\n                    }\n                }\n\n            } catch (error) {\n                console.log(error);\n            }\n        },\n\n        matchScreenID(screenA, screenB) {\n            if (screenA.length !== screenB.length) {\n                return false;\n            }\n            for (let i = 0; i < screenA.length - 1; i++) {\n                if (screenA[i] !== screenB[i]) {\n                    return false;\n                }\n            }\n            return true;\n        },\n\n        matchApprovalModeScreenID(screenA, screenB) {\n            if (screenA.length !== screenB.length) {\n                return false;\n            }\n            for (let i = 0; i < screenA.length - 5; i++) {\n                if (screenA[i] !== screenB[i]) {\n                    return false;\n                }\n            }\n            return true;\n        },\n\n    }\n})\n","import { render } from \"./BreadCrumb.html?vue&type=template&id=6668b2f2&scoped=true&ts=true\"\nimport script from \"./BreadCrumb.vue?vue&type=script&lang=ts\"\nexport * from \"./BreadCrumb.vue?vue&type=script&lang=ts\"\n\nimport \"./BreadCrumb.vue?vue&type=style&index=0&id=6668b2f2&lang=scss&scoped=true\"\n\nimport exportComponent from \"/workspace/source/node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render],['__scopeId',\"data-v-6668b2f2\"]])\n\nexport default __exports__","import { renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, normalizeClass as _normalizeClass, createCommentVNode as _createCommentVNode, toDisplayString as _toDisplayString, createTextVNode as _createTextVNode, resolveComponent as _resolveComponent, withCtx as _withCtx, createBlock as _createBlock, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \"vue\"\n\nconst _withScopeId = n => (_pushScopeId(\"data-v-6668b2f2\"),n=n(),_popScopeId(),n)\nconst _hoisted_1 = { class: \"bread_crumb\" }\n\nexport function render(_ctx, _cache) {\n  const _component_ion_label = _resolveComponent(\"ion-label\")\n\n  return (_openBlock(), _createElementBlock(\"div\", _hoisted_1, [\n    (_openBlock(true), _createElementBlock(_Fragment, null, _renderList(_ctx.breadcrumbs, (item, index) => {\n      return (_openBlock(), _createElementBlock(_Fragment, { key: index }, [\n        (item.menuIconID && index == 0 )\n          ? (_openBlock(), _createElementBlock(\"span\", {\n              key: 0,\n              class: _normalizeClass([\"icon_menu\", [item.menuIconID]])\n            }, null, 2))\n          : _createCommentVNode(\"\", true),\n        (item.route == '' || item.route == '/' )\n          ? (_openBlock(), _createBlock(_component_ion_label, { key: 1 }, {\n              default: _withCtx(() => [\n                _createTextVNode(_toDisplayString(_ctx.$t(`${item.menuName}`)), 1)\n              ]),\n              _: 2\n            }, 1024))\n          : _createCommentVNode(\"\", true),\n        (item.route != '' && item.route != '/')\n          ? (_openBlock(), _createBlock(_component_ion_label, {\n              key: 2,\n              onClick: $event => (_ctx.pathDriver(item.route, _ctx.queryData))\n            }, {\n              default: _withCtx(() => [\n                _createTextVNode(_toDisplayString(_ctx.$t(`${item.menuName}`)), 1)\n              ]),\n              _: 2\n            }, 1032, [\"onClick\"]))\n          : _createCommentVNode(\"\", true)\n      ], 64))\n    }), 128))\n  ]))\n}"],"names":["defineComponent","props","staticScreenName","type","String","required","queryData","Array","data","breadcrumbs","menuList","async","setTimeout","this","renderMenuFromState","getMenuList","computed","approvalType","$route","query","toString","watch","newValue","path","length","pop","push","menuName","route","methods","pathDriver","currentPath","queryItem","$router","menuListData","JSON","parse","stringify","filter","item","parentMenuID","replace","buildBreadcrumb","console","log","error","currentRoute","currentMenu","find","screenID","generateBreadcrumbs","menu","DataCenter","menuitem","parentSubUserListScreen","menuID","notExistScreenID","forEach","parentScreenID","matchScreenID","matchApprovalModeScreenID","lastCharacterOfScreenID","charAt","staticBreabCrumb","previousStaticScreenID","previousPath","options","history","state","back","pathID","includes","menuItems","menuNewEvent","$t","homeScreen","breadcrumb","menuIconID","unshift","parentMenu","screenA","screenB","i","__exports__","_hoisted_1","class","render","_ctx","_cache","_component_ion_label","_resolveComponent","_openBlock","_createElementBlock","_Fragment","_renderList","index","key","_normalizeClass","_createCommentVNode","_createBlock","default","_withCtx","_createTextVNode","_toDisplayString","_","onClick","$event"],"sourceRoot":""}